import { fetchCompetitionStandings } from '../utils/fetchAPI.js';

export default async function classementCommand(interaction) {
    const competitionId = interaction.options.getString('competition'); // ID de la comp√©tition re√ßu (exemple : /competition: PL donc competitionId = PL)

    if (!competitionId) {
        await interaction.reply('‚ùå Vous devez fournir un ID de comp√©tition.');
        return;
    }

    // appel √† l'API pour r√©cup√©rer les standings
    const standingsData = await fetchCompetitionStandings(competitionId);

    if (!standingsData || !standingsData.standings || standingsData.standings.length === 0) {
        await interaction.reply('‚ùå Classement indisponible pour cette comp√©tition.');
        return;
    }

    // informations n√©cessaires
    const competitionName = standingsData.competition.name;
    const currentMatchday = standingsData.season.currentMatchday;
    const table = standingsData.standings[0].table;

    let formattedStandings = ''; // Cha√Æne pour stocker le classement format√©

// parcourir la table
for (let i = 0; i < table.length; i++) {
    // v√©rifiication, si nous avons trait√© 10 √©quipes
    if (i >= 10) {
        break; // arr√™te la boucle apr√®s 10 √©quipes (si il y'en a moins)
    }

    const team = table[i]; 

    formattedStandings += `**${team.position}. ${team.team.name}**\n`;
    formattedStandings += `Points : ${team.points}, Jou√©s : ${team.playedGames}, Gagn√©s : ${team.won}, Nuls : ${team.draw}, Perdus : ${team.lost}\n\n`;
}

    // envoi du message format√©
    await interaction.reply({
        content: `üèÜ **Classement : ${competitionName} (Journ√©e ${currentMatchday})**\n\n${formattedStandings}`,
        ephemeral: false,
    });
}
